// Code generated by goyacc -o cc/crd.go -v cc/crd.output cc/crd.y. DO NOT EDIT.

//line cc/crd.y:2
package cc

import __yyfmt__ "fmt"

//line cc/crd.y:2

import (
	"github.com/berquerant/crd/ast"
	"github.com/berquerant/crd/note"
	"math/big"
)

//line cc/crd.y:11
type yySymType struct {
	yys          int
	score        *ast.Score
	nodeList     []ast.Node
	node         ast.Node
	token        Token
	chordNote    *ast.ChordNote
	chordOption  *ast.ChordOption
	chordBase    *ast.ChordBase
	value        note.Value
	name         note.Name
	augmented    bool
	diminished   bool
	minor        bool
	major        bool
	seventh      bool
	sixth        bool
	suspended    bool
	forth        bool
	accidental   note.Accidental
	accidentaled int
	keyMinor     bool
	key          note.Key
}

const REST = 57346
const MINOR = 57347
const MAJOR = 57348
const SEVENTH = 57349
const DIMINISHED = 57350
const AUGMENTED = 57351
const SIXTH = 57352
const SUSPENDED = 57353
const FORTH = 57354
const MINUS = 57355
const PLUS = 57356
const SHARP = 57357
const FLAT = 57358
const SLASH = 57359
const INT = 57360
const LBRA = 57361
const RBRA = 57362
const C = 57363
const D = 57364
const E = 57365
const F = 57366
const G = 57367
const A = 57368
const B = 57369
const TEMPO = 57370
const METER = 57371
const KEY = 57372

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"REST",
	"MINOR",
	"MAJOR",
	"SEVENTH",
	"DIMINISHED",
	"AUGMENTED",
	"SIXTH",
	"SUSPENDED",
	"FORTH",
	"MINUS",
	"PLUS",
	"SHARP",
	"FLAT",
	"SLASH",
	"INT",
	"LBRA",
	"RBRA",
	"C",
	"D",
	"E",
	"F",
	"G",
	"A",
	"B",
	"TEMPO",
	"METER",
	"KEY",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line cc/crd.y:259

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 85

var yyAct = [...]int{
	31, 9, 14, 63, 23, 15, 16, 17, 18, 19,
	20, 21, 43, 62, 59, 42, 48, 24, 15, 16,
	17, 18, 19, 20, 21, 11, 12, 13, 74, 72,
	71, 73, 30, 41, 69, 29, 28, 78, 77, 45,
	44, 76, 50, 75, 55, 51, 52, 40, 39, 34,
	32, 33, 67, 49, 36, 65, 27, 38, 61, 58,
	57, 54, 47, 3, 56, 70, 22, 68, 66, 64,
	60, 53, 46, 37, 26, 35, 25, 10, 8, 7,
	6, 5, 4, 2, 1,
}

var yyPact = [...]int{
	-3, -1000, -3, -1000, -1000, -1000, -1000, -1000, -1000, -2,
	47, 17, 16, 13, 35, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 31, 37, 49, -1000, 30, 29,
	-16, -1000, -1000, -1000, -5, -2, -16, 57, -1000, -4,
	36, 35, -1000, 27, -1000, 35, 55, -1000, -1000, 26,
	54, -6, -1000, 51, -1000, -7, -17, -1000, -1000, -1000,
	45, -1000, -1000, -1000, 41, -1000, 22, -1000, 15, -1000,
	-1000, 25, 23, 20, 19, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 84, 83, 63, 82, 81, 80, 79, 78, 4,
	77, 76, 75, 2, 0, 74, 73, 72, 71, 70,
	69, 68, 67, 65, 64,
}

var yyR1 = [...]int{
	0, 1, 2, 2, 3, 3, 3, 3, 3, 8,
	24, 24, 24, 6, 7, 4, 5, 10, 13, 13,
	13, 13, 13, 13, 13, 14, 14, 14, 12, 12,
	11, 15, 15, 16, 16, 17, 17, 18, 18, 19,
	19, 20, 20, 21, 21, 22, 22, 23, 23, 23,
	23, 23, 9, 9,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 1, 1, 1, 1, 1, 6,
	0, 1, 1, 4, 6, 2, 4, 2, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 0, 3,
	9, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 2, 2,
	2, 2, 3, 5,
}

var yyChk = [...]int{
	-1000, -1, -2, -3, -4, -5, -6, -7, -8, 4,
	-10, 28, 29, 30, -13, 21, 22, 23, 24, 25,
	26, 27, -3, -9, 19, -11, -15, 9, 19, 19,
	19, -14, 15, 16, 18, -12, 17, -16, 8, 18,
	18, -13, 20, 17, -9, -13, -17, 5, 20, 17,
	-14, 18, -14, -18, 6, 18, -24, 6, 5, 20,
	-19, 7, 20, 20, -20, 10, -21, 11, -22, 12,
	-23, 15, 14, 16, 13, 18, 18, 18, 18,
}

var yyDef = [...]int{
	0, -2, 1, 2, 4, 5, 6, 7, 8, 0,
	31, 0, 0, 0, 25, 18, 19, 20, 21, 22,
	23, 24, 3, 15, 0, 28, 33, 32, 0, 0,
	0, 17, 26, 27, 0, 0, 0, 35, 34, 0,
	0, 25, 52, 0, 16, 25, 37, 36, 13, 0,
	10, 0, 29, 39, 38, 0, 0, 11, 12, 53,
	41, 40, 14, 9, 43, 42, 45, 44, 47, 46,
	30, 0, 0, 0, 0, 48, 49, 50, 51,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:86
		{
			x := &ast.Score{NodeList: yyDollar[1].nodeList}
			yylex.(Lexer).SetResult(x)
			yyVAL.score = x
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:93
		{
			yyVAL.nodeList = []ast.Node{yyDollar[1].node}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cc/crd.y:96
		{
			yyVAL.nodeList = append(yyDollar[1].nodeList, yyDollar[2].node)
		}
	case 9:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cc/crd.y:104
		{
			yyVAL.node = &ast.Key{
				Key: note.NewKey(yyDollar[3].name, yyDollar[4].accidental, yyDollar[5].keyMinor),
			}
		}
	case 10:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:111
		{
			yyVAL.keyMinor = false
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:112
		{
			yyVAL.keyMinor = false
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:113
		{
			yyVAL.keyMinor = true
		}
	case 13:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cc/crd.y:116
		{
			bpm := yylex.(Lexer).ParseInt(yyDollar[3].token.Value())
			yyVAL.node = &ast.Tempo{
				BPM: bpm,
			}
		}
	case 14:
		yyDollar = yyS[yypt-6 : yypt+1]
//line cc/crd.y:124
		{
			l := yylex.(Lexer)
			n := l.ParseUint8(yyDollar[3].token.Value())
			d := l.ParseUint8(yyDollar[5].token.Value())
			yyVAL.node = &ast.Meter{
				Num:   n,
				Denom: d,
			}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cc/crd.y:135
		{
			yyVAL.node = &ast.Rest{Value: yyDollar[2].value}
		}
	case 16:
		yyDollar = yyS[yypt-4 : yypt+1]
//line cc/crd.y:140
		{
			yyVAL.node = &ast.Chord{
				ChordNote:   yyDollar[1].chordNote,
				ChordOption: yyDollar[2].chordOption,
				ChordBase:   yyDollar[3].chordBase,
				Value:       yyDollar[4].value,
			}
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cc/crd.y:150
		{
			n := note.NewSPN(note.NewNote(yyDollar[1].name, yyDollar[2].accidental), note.Octave(4))
			yyVAL.chordNote = &ast.ChordNote{SPN: n}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:156
		{
			yyVAL.name = note.C
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:157
		{
			yyVAL.name = note.D
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:158
		{
			yyVAL.name = note.E
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:159
		{
			yyVAL.name = note.F
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:160
		{
			yyVAL.name = note.G
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:161
		{
			yyVAL.name = note.A
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:162
		{
			yyVAL.name = note.B
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:165
		{
			yyVAL.accidental = note.Natural
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:166
		{
			yyVAL.accidental = note.Sharp
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:167
		{
			yyVAL.accidental = note.Flat
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:170
		{
			yyVAL.chordBase = nil
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cc/crd.y:171
		{
			yyVAL.chordBase = &ast.ChordBase{
				Note: note.NewNote(yyDollar[2].name, yyDollar[3].accidental),
			}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
//line cc/crd.y:186
		{
			yyVAL.chordOption = &ast.ChordOption{
				IsAugmented:  yyDollar[1].augmented,
				IsDiminished: yyDollar[2].diminished,
				IsMinor:      yyDollar[3].minor,
				IsMajor:      yyDollar[4].major,
				IsSeventh:    yyDollar[5].seventh,
				IsSixth:      yyDollar[6].sixth,
				IsSuspended:  yyDollar[7].suspended,
				IsForth:      yyDollar[8].forth,
				Accidentaled: yyDollar[9].accidentaled,
			}
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:201
		{
			yyVAL.augmented = false
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:202
		{
			yyVAL.augmented = true
		}
	case 33:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:205
		{
			yyVAL.diminished = false
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:206
		{
			yyVAL.diminished = true
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:209
		{
			yyVAL.minor = false
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:210
		{
			yyVAL.minor = true
		}
	case 37:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:213
		{
			yyVAL.major = false
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:214
		{
			yyVAL.major = true
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:217
		{
			yyVAL.seventh = false
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:218
		{
			yyVAL.seventh = true
		}
	case 41:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:221
		{
			yyVAL.sixth = false
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:222
		{
			yyVAL.sixth = true
		}
	case 43:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:225
		{
			yyVAL.suspended = false
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:226
		{
			yyVAL.suspended = true
		}
	case 45:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:229
		{
			yyVAL.forth = false
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line cc/crd.y:230
		{
			yyVAL.forth = true
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
//line cc/crd.y:233
		{
			yyVAL.accidentaled = 0
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cc/crd.y:234
		{
			yyVAL.accidentaled = yylex.(Lexer).ParseInt(yyDollar[2].token.Value())
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cc/crd.y:237
		{
			yyVAL.accidentaled = yylex.(Lexer).ParseInt(yyDollar[2].token.Value())
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cc/crd.y:240
		{
			yyVAL.accidentaled = -yylex.(Lexer).ParseInt(yyDollar[2].token.Value())
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line cc/crd.y:243
		{
			yyVAL.accidentaled = -yylex.(Lexer).ParseInt(yyDollar[2].token.Value())
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line cc/crd.y:248
		{
			i := yylex.(Lexer).ParseInt(yyDollar[2].token.Value())
			yyVAL.value = note.NewValue(new(big.Rat).SetInt64(int64(i)))
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
//line cc/crd.y:252
		{
			l := yylex.(Lexer)
			x := l.ParseInt(yyDollar[2].token.Value())
			y := l.ParseInt(yyDollar[4].token.Value())
			yyVAL.value = note.NewValue(big.NewRat(int64(x), int64(y)))
		}
	}
	goto yystack /* stack new state and value */
}
