// Code generated by "mkvisitor -output chords_mkvisitor_generated.go -type ChordList,Chord,ChordDegree,ChordSymbol,ChordBase,ChordValues,ChordValue,Rest"; DO NOT EDIT.

package ast

import "fmt"

type Visitor interface {
	VisitChordList(*ChordList)
	VisitChord(*Chord)
	VisitChordDegree(*ChordDegree)
	VisitChordSymbol(*ChordSymbol)
	VisitChordBase(*ChordBase)
	VisitChordValues(*ChordValues)
	VisitChordValue(*ChordValue)
	VisitRest(*Rest)
}

func (s *ChordList) Accept(v Visitor)   { v.VisitChordList(s) }
func (s *Chord) Accept(v Visitor)       { v.VisitChord(s) }
func (s *ChordDegree) Accept(v Visitor) { v.VisitChordDegree(s) }
func (s *ChordSymbol) Accept(v Visitor) { v.VisitChordSymbol(s) }
func (s *ChordBase) Accept(v Visitor)   { v.VisitChordBase(s) }
func (s *ChordValues) Accept(v Visitor) { v.VisitChordValues(s) }
func (s *ChordValue) Accept(v Visitor)  { v.VisitChordValue(s) }
func (s *Rest) Accept(v Visitor)        { v.VisitRest(s) }

type VisitorDefault struct{}

func (s *VisitorDefault) VisitChordList(_ *ChordList)     {}
func (s *VisitorDefault) VisitChord(_ *Chord)             {}
func (s *VisitorDefault) VisitChordDegree(_ *ChordDegree) {}
func (s *VisitorDefault) VisitChordSymbol(_ *ChordSymbol) {}
func (s *VisitorDefault) VisitChordBase(_ *ChordBase)     {}
func (s *VisitorDefault) VisitChordValues(_ *ChordValues) {}
func (s *VisitorDefault) VisitChordValue(_ *ChordValue)   {}
func (s *VisitorDefault) VisitRest(_ *Rest)               {}
func VisitSwitch(visitor Visitor, v interface{}) {
	switch v := v.(type) {
	case *ChordList:
		visitor.VisitChordList(v)
	case *Chord:
		visitor.VisitChord(v)
	case *ChordDegree:
		visitor.VisitChordDegree(v)
	case *ChordSymbol:
		visitor.VisitChordSymbol(v)
	case *ChordBase:
		visitor.VisitChordBase(v)
	case *ChordValues:
		visitor.VisitChordValues(v)
	case *ChordValue:
		visitor.VisitChordValue(v)
	case *Rest:
		visitor.VisitRest(v)
	default:
		panic(fmt.Sprintf("VisitSwitch cannot switch %#v", v))
	}
}
